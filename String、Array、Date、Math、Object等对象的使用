<!DOCTYPE html>
<html>

	<head>
		<meta charset="UTF-8">
		<title></title>
	</head>

	<body>
		<script>
			//1.String对象
			var s1 = new String("Hello World");
			var s2 = new String("Beautiful");
			//var s1="Hello"；
			//子串长度
			document.write(s1.length + "<br />");
			//返回字符串中第x个位置上的字符，从0开始计数
			document.write(s1.charAt(s1) + "<br />");
			//返回字符串中第x个位置上字符的Unicode编码，从0开始计数
			document.write(s1.charCodeAt(1) + "<br />");
			//把参数分别转换为字符串并完成字符串的连接操作
			document.write(s1.concat(s2) + "<br />");
			//子串查找从前往后检索字符串，返回子字符串在位置×后第一次出现的开始位置，如果检索失败，则返回-1
			document.write(s1.indexOf("o") + "<br />");
			document.write(s1.indexOf("o", 5) + "<br />");
			document.write(s1.indexOf("o", 8) + "<br />");
			//从后向前搜索字符串,返回子字符串在位置×后最后一次出现的开始位置，如果检索失败，则返回-1
			document.write(s1.lastIndexOf("o", 5) + "<br />");
			//使用字符串y替换x指定的字符串，并返回替换后的结果
			document.write(s1.replace("World", "China") + "<br />");
			//使用字符串y替换x指定的字符串，并返回替换后的结果
			document.write(s1.search("World") + "<br />");
			//子串截取
			//返回从×位置到y位置结束的子字符串，但不包含v位置上的字符。省略y时，返回x位置到结束位置的子字符串
			document.write(s1.slice(3, 7) + "<br />");
			document.write(s1.substring(3, 7) + "<br />");
			//返回从x位置开始的连续y个字符的字符串,省略y时返回x位置到结束位置的字符串
			document.write(s1.substr(3, 7) + "<br />");
			//以x为分隔符号，把字符串分割为字符串数组
			document.write(s1.split("o") + "<br />");
			//子串大小写转换
			document.write(s1.toLowerCase() + "<br />");
			document.write(s1.toUpperCase() + "<br />");
			document.write("---------------------------------" + "<br />");
			//2.Array对象
			//var myArray1 = new Array();
			//var myArray2 = new Array(4);
			//var myArray3 = new Array("张三", "男", "20");
			//var myArray4 = ["王五", "男", "22"];

			var myArray1 = new Array(3); //创建数组对象myArray1			
			myArray1[0] = "姓名 ";
			myArray1[1] = "性别 ";
			myArray1[2] = "年龄 ";
			var myArray2 = new Array(3); //创建数组对象myArray2
			myArray2[0] = "张三 ";
			myArray2[1] = "男 ";
			myArray2[2] = "20 ";
			var myArray3 = new Array(3); //创建数组对象myArray3
			myArray3[0] = "李四";
			myArray3[1] = "女";
			myArray3[2] = "19 ";
			var myArray4 = new Array(myArray1, myArray2, myArray3); //创建数组对象myArray4
			for(var i = 0; i < myArray4.length; i++) { //变量i用于控制行标				
				for(var j = 0; j < 3; j++) { //变量j用于控制列标
					document.write(myArray4[i][j]);
				}
				document.write("<br />");
			}
			var myArray5 = [1, 3, 8, 9, 6, 4, 2];
			document.write(myArray5.length + "<br />");
			document.write(myArray5.reverse() + "<br />");
			//返回一个元素已经进行了排序的 Array 对象。 
			document.write(myArray5.sort() + "<br />");
			//返回字符串值，其中包含了连接到一起的数组的所有元素，元素由指定的分隔符分隔开来。
			document.write(myArray5.join("-") + "<br />");
			//返回一个新数组，这个新数组是由两个或更多数组组合而成的。
			document.write(myArray5.concat(myArray3) + "<br />");
			//constructor 属性保存了对构造特定对象实例的函数的引用。
			if(myArray5.constructor == Array) {
				document.write("myArray5.constructor==Array" + "<br />");
			}
			//删除并返回数组的最后一个元素
			document.write(myArray5.pop() + "<br />");
			//向数组的末尾添加一个或更多元素，并返回新的长度。
			document.write(myArray5.push(7, 5) + "<br />");
			//删除并返回数组的第一个元素
			document.write(myArray5.shift() + "<br />");
			//向数组的开头添加一个或更多元素，并返回新的长度。
			document.write(myArray5.unshift(7, 5) + "<br />");
			//从菜个已有的数组返回选定的元素
			document.write(myArray5.slice(0, 2) + "<br />");
			//删除元素，并向数组添加新元素。
			document.write(myArray5.splice(0, 2) + "<br />"); //从下标为0的元素开始删除，删除两个元素，显示删除的两个元素
			document.write(myArray5 + "<br />");
			document.write(myArray5.splice(0, 2, "7,5") + "<br />"); //从下标为0的元素开始删除，删除两个元素，并用后面元素替换,显示删除的两个元素
			document.write(myArray5 + "<br />");
			document.write(myArray5.splice(0, 0, "3,4") + "<br />"); //从下标为0的元素开始删除，0两个元素，添加后面的元素,显示删除的0个元素
			document.write(myArray5 + "<br />");
			//把数组转换为字符串，并返回结果。
			document.write(myArray5.toString() + "<br />");
			//把数组转换为本地数组，并返回结果。
			document.write(myArray5.toLocaleString() + "<br />");
			//返回数组对象的原始值
			document.write(myArray5.valueOf() + "<br />");
			document.write("---------------------------------" + "<br />");
			//3.Date对象
			var myDate1 = new Date();
			var myDate2 = new Date("24 October 2015");
			var myDate3 = new Date(2008, 7, 8, 20, 08, 08, 08);
			//获得日期时间值******************************************
			//返回月份的第几天，取值范围为1~31
			document.write(myDate1.getDate() + "<br />");
			//返回星期几，0表示周日，取值范围为0~6
			document.write(myDate1.getDay() + "<br />");
			//返回月份值，0表示1月，取值范围为0~11
			document.write(myDate1.getMonth() + "<br />");
			//返回四位数字表示的年份
			document.write(myDate1.getFullYear() + "<br />");
			//返回小时值，取值范围为0~23
			document.write(myDate1.getHours() + "<br />");
			//返回分钟值，取值范围为0~59
			document.write(myDate1.getMinutes() + "<br />");
			//返回秒值，取值范围为0~59
			document.write(myDate1.getSeconds() + "<br />");
			//返回从1970年1月1日至今的毫秒总数，与时区无关
			document.write(myDate1.getTime() + "<br />");
			//设置日期时间值******************************************
			//传递参数为月份的第几天，返回值为毫秒值
			document.write(myDate2.setDate(3) + "<br />");
			//传递参数为月和日，日参数可选，0代表1月
			document.write(myDate2.setMonth(3) + "<br />");
			//其他同上
			document.write("---------------------------------" + "<br />");
			//4.Math对象
			var myNumber1 = -16.16;
			var myNumber2 = -16.66;
			//返回数字的绝对值。 
			document.write(Math.abs(myNumber1) + "<br />"); //输出值为16.16
			//返回大于等于其数字参数的最小整数。
			document.write(Math.ceil(myNumber1) + "<br />"); //输出值为-16
			document.write(Math.ceil(myNumber2) + "<br />"); //输出值为-16
			//返回小于等于其数值参数的最大整数。 
			document.write(Math.floor(myNumber1) + "<br />"); //输出值为-17
			document.write(Math.floor(myNumber2) + "<br />"); //输出值为-17
			//返回与给出的数值表达式最接近的整数。四舍五入。
			document.write(Math.round(myNumber1) + "<br />"); //输出值为-16
			document.write(Math.round(myNumber2) + "<br />"); //输出值为-17
			var randomNumber = Math.floor(Math.random() * 100 + 1); //获得1~100的随机数
			document.write(randomNumber + "<br />");
			document.write("---------------------------------" + "<br />");
			//5.Object对象			
			//var myObject ="Hello World";
			//对 String 对象编码以便它们能在所有计算机上可读
			document.write(escape("易烊千玺") + "<br />");
			//解码用 escape 方法进行了编码的 String 对象。 
			document.write(unescape("%u6613%u70CA%u5343%u73BA") + "<br />");
			//检查 JScript 代码并执行. 
			document.write(eval("var mydate = new Date();") + "<br />");
			//返回一个 Boolean 值,指明所提供的数字是否是有限的。如果 number 不是 NaN 、负无穷或正无穷，那么 isFinite 方法将返回 true 。 如果是这三种情况，函数返回 false 。
			document.write(isFinite(2) + "<br />");
			//返回一个 Boolean 值，指明提供的值是否是保留值 NaN （不是数字）。 
			document.write(isNaN(2) + "<br />");
			//返回由字符串转换得到的整数。parseInt 方法返回与保存在 numString 中的数字值相等的整数。如果 numString 的前缀不能解释为整数，则返回 NaN（而不是数字）。 
			document.write(parseInt("abc") + "<br />");
			document.write(parseInt("1.2abc") + "<br />");
			//返回由字符串转换得到的浮点数。 parseFloat 方法返回与 numString 中保存的数相等的数字表示。如果 numString 的前缀不能解释为浮点数，则返回 NaN （而不是数字）。
			document.write(parseFloat("abc") + "<br />");
			document.write(parseFloat("1.2abc") + "<br />");
		</script>
	</body>

</html>
